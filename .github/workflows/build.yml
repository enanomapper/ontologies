name: Build slims
on:
  workflow_dispatch:
  pull_request:
    paths:
     - 'config.yaml'
     - '.github/workflows/build.yml'
     - './config/*'
     - './internal*'
     - './external*'
  push:
    paths:
     - 'config.yaml'
     - '.github/workflows/build.yml'
     - './config/*'
     - './internal*'
     - './external*'
  schedule:
    - cron: 1 0 1 1-12 *
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository
      uses: actions/checkout@v3
      with:
       token: ${{ secrets.PAT }} 
    - name: Convert slimmer config to ROBOT term files
      run: bash scripts/build-workflow/slimmer2robot.sh
    # Get slimmer and robot
    - name: add slimmer and robot URLs to environment
      run: |
        echo $(java --version)
        config_file="config.yaml"
        robot_jar=""
        robot=""
        slimmer=""

        while IFS=":" read -r key value; do
          key=$(echo "$key" | tr -d '[:space:]')

          case "$key" in
            robot-jar)
              robot_jar=$(echo "$value" | tr -d '[:space:]')
              ;;
            robot-wrapper)
              robot=$(echo "$value" | tr -d '[:space:]')
              ;;
            slimmer)
              slimmer=$(echo "$value" | tr -d '[:space:]')
              ;;
          esac
        done < "$config_file"
        echo SLIMMER: $slimmer
        echo ROBOT JAR: $robot_jar
        echo ROBOT WRAPPER: $robot
        echo 'slimmer='${slimmer}'' >> $GITHUB_ENV
        echo 'robot='${robot}'' >> $GITHUB_ENV
        echo 'robot_jar='${robot_jar}'' >> $GITHUB_ENV
    - name: get slimmer
      run: wget ${{ env.slimmer }}
    - name: get robot
      run: |
        wget ${{ env.robot }}
        wget ${{ env.robot_jar}}
  
  # build all ontologies
  # Authorize running build script
    - name: authorize running build scripts
      run: chmod 755 scripts/build-workflow/*.sh
  
  # build aopo
    - name: build-aopo
      if: always()
      run: bash scripts/build-workflow/build.sh aopo
  
  # build bao
    - name: build-bao
      if: always()
      run: bash scripts/build-workflow/build.sh bao
  
  # build bfo
    - name: build-bfo
      if: always()
      run: bash scripts/build-workflow/build.sh bfo
  
  # build bto
    - name: build-bto
      if: always()
      run: bash scripts/build-workflow/build.sh bto
  
  # build ccont
    - name: build-ccont
      if: always()
      run: bash scripts/build-workflow/build.sh ccont
  
  # build cheminf
    - name: build-cheminf
      if: always()
      run: bash scripts/build-workflow/build.sh cheminf
    
  # build chebi
    - name: build-chebi
      if: always()
      run: bash scripts/build-workflow/build.sh chebi
  
  # build chmo
    - name: build-chmo
      if: always()
      run: bash scripts/build-workflow/build.sh chmo
  
  # build clo
    - name: build-clo
      if: always()
      run: bash scripts/build-workflow/build.sh clo
  
  # build efo
    - name: build-efo
      if: always()
      run: bash scripts/build-workflow/build.sh efo
  
  # build envo
    - name: build-envo
      if: always()
      run: bash scripts/build-workflow/build.sh envo
  
  # build fabio
    - name: build-fabio
      if: always()
      run: bash scripts/build-workflow/build.sh fabio
  
  # build go
    - name: build-go
      if: always()
      run: bash scripts/build-workflow/build.sh go
  
  # build iao
    - name: build-iao
      if: always()
      run: bash scripts/build-workflow/build.sh iao
  
  # build ncit
    - name: build-ncit
      if: always()
      run: bash scripts/build-workflow/build.sh ncit
  
  # build npo
    - name: build-npo
      if: always()
      run: bash scripts/build-workflow/build.sh npo
  
  # build oae
    - name: build-oae
      if: always()
      run: bash scripts/build-workflow/build.sh oae
  
  # build obcs
    - name: build-obcs
      if: always()
      run: bash scripts/build-workflow/build.sh obcs
  
  # build obi
    - name: build-obi
      if: always()
      run: bash scripts/build-workflow/build.sh obi
  
  # build pato
    - name: build-pato
      if: always()
      run: bash scripts/build-workflow/build.sh pato
  
  # build sio
    - name: build-sio
      if: always()
      run: bash scripts/build-workflow/build.sh sio
  
  # build uberon
    - name: build-uberon
      if: always()
      run: bash scripts/build-workflow/build.sh uberon
  
  # build uo
    - name: build-uo
      if: always()
      run: bash scripts/build-workflow/build.sh uo

  # build msio
    - name: build-msio
      if: always()
      run: bash scripts/build-workflow/build.sh msio

  # Commit and push
    - name: Commit OWL files
      run: |
        if [[ "${{ github.ref_name }}" == *"merge"* ]]; then
          exit 0
        fi
        git checkout "${{ github.ref_name }}"
        git pull
        git add -f external-dev/*.owl
        git config --local user.email "action@github.com"
        git config --local user.name "Slimmer bot"
        # Check if there are changes to commit
        if git diff-index --quiet HEAD --; then
          echo "No changes to commit."
        else
            git commit -m "Actions - build updated" ./external-dev/*.owl || true
          fi
        # Check if there are changes to push
        if [[ $(git rev-parse --abbrev-ref HEAD) == "${{ github.ref_name }}" ]]; then
          if [ -n "$(git cherry -v)" ]; then
            git push || echo "Push failed."
          else
            echo "No changes to push."
          fi
        fi

